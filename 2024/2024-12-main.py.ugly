import sys
import matplotlib.pyplot as plt

infile = sys.argv[1] if len(sys.argv)>=2 else './data/12.in'

raw = open(infile).read().strip()

data = raw.split("\n")

print(f"\nFormatted data:")
for d in data:
    print(d)


def make_regions(L: list):
    """Construct dictionary of regions."""

    R = {}

    for i in range(len(L)):
        for j in range(len(L[0])):

            val = L[i][j]

            if val in R.keys():

                adj = []
                for ii, r in enumerate(R[val]):
                    if count_neighbors(i, j, r) > 0:
                        adj.append(ii)
                
                # Handle number of adjacents differently
                if len(adj) == 0:
                    R[val].append([(i, j)])

                elif len(adj) == 1:
                    R[val][adj[0]].append((i, j))
                
                elif len(adj) == 2:
                    R[val][adj[0]].append((i, j))

                    l1 = R[val][adj[0]].copy()
                    l2 = R[val][adj[1]].copy()

                    R[val][adj[0]] = l1 + l2
                    R[val].pop(adj[1])
                        
                else:
                    print(f"{len(adj)}:  Impossible number of adjacents found.")
                    
            else:
                # If value does not exist in dictionary, initialize
                R[val] = []
                R[val].append([(i, j)])

    return R


def count_neighbors(i, j, l):
    """"""
    neighbors = 0

    if (i + 1, j) in l:
        neighbors += 1
    if (i - 1, j) in l:
        neighbors += 1
    if (i, j - 1) in l:
        neighbors += 1
    if (i, j + 1) in l:
        neighbors += 1

    return neighbors


def compute_price(R: dict):
    """Compute price metric"""
    
    price = 0
    
    for key, vals in R.items():
        for v in vals:
       
            perimeter = 0
            area = len(v)

            for i, j in v:
                neighbors = count_neighbors(i, j, v)
                perimeter += 4 - neighbors
       
            price += area * perimeter

    return price


# Part 1:
regions = make_regions(data.copy())

'''
# Print regions
for k, v in regions.items():
    print(f"\n{k}({len(v)}):")
    for vv in v:
        print(f"({len(vv)}) {vv}")
'''

p1 = compute_price(regions)

print(f"\n{'Solution to Part 1:':<20} {p1}")


# Part 2:

def find_edges(L: list):
    """Takes list of points making up a region and returns number of sides."""
   
    #print(f"\nRegion:\n{L}")

    region_edges = []

    for l in L:

        #print(f"Point ({l})")

        cell_edges = set()

        # Compute mid point of cell edges
        cell_edges.add((l[0] - 0.5, l[1]))  # top
        cell_edges.add((l[0], l[1] + 0.5))  # right
        cell_edges.add((l[0] + 0.5, l[1]))  # bottom
        cell_edges.add((l[0], l[1] - 0.5))  # left

        # Check if edges exist in region_edges; if so remove from region and cell_edges set
        new_edge = set()
        for c in cell_edges:
            exterior = True
            for r in region_edges:
                if c in r:
                    r.remove(c)
                    exterior = False

            if exterior:
                new_edge.add(c)

        #print(f"Pruned cell edges:  {new_edge}")


        # Make sure edges are still continuous
        temp = []
        for r in region_edges:

            if len(r) < 2:
                temp.append(r)
            else:

                split_point = -1

                # Vertical edges
                if int(r[0][0]) == r[0][0]:
                    for i in range(len(r) - 1):
                        diff = r[i + 1][0] - r[i][0]
                        if diff != 1:
                            #print(diff)
                            split_point = i


                # Horizontal edges
                if int(r[0][1]) == r[0][1]:
                    for i in range(len(r) - 1):
                        diff = r[i + 1][1] - r[i][1]
                        if diff != 1:
                            #print(diff)
                            split_point = i


                # If a split is needed, append 
                if split_point > -1:
                    temp.append(r[0:split_point + 1])
                    temp.append(r[split_point + 1:])
                else:
                    temp.append(r)


        region_edges = temp.copy()


        # Add new_edges to appropriate edge list
        for c in new_edge:

            # Vertical edges
            if(int(c[0]) == c[0]):
                new_edge = True
                for r in region_edges:
                    if (c[0] - 1, c[1]) in r and ((l[0] - 1, l[1]) in L):
                        r.append(c)
                        new_edge = False

                if new_edge:
                    region_edges.append([c])

            # Horizontal edges
            if (int(c[1]) == c[1]):
                new_edge = True
                for r in region_edges:
                    if (c[0], c[1] - 1) in r and ((l[0], l[1] - 1) in L):
                        r.append(c)
                        new_edge = False

                if new_edge:
                    region_edges.append([c])

            # Cleanup region edges:  remove empty entries
            region_edges = [x for x in region_edges if len(x) > 0]
            
            #print(f" * Current cell: {c}")
            #print(f" * Current region edges:\n{region_edges}")    
    
    '''
    for r in region_edges:
        print(f"({len(r)}): {r}")
    '''
    
    return sorted(region_edges)

price2 = 0
all_edges =[]

for k, v in regions.items():
    print(f"\n*** {k} regions ***")
    for vv in v:
        edges = find_edges(sorted(vv.copy()))
        
        for e in edges:
            print(f"({len(e)}): {e}")
            all_edges.append(e)


        area = len(vv)
        sides = len(edges)

        print(f"Sides: {sides}")
        print(f"Area: {area}")
        print(f"Price contribution:  {sides*area}\n")

        price2 += sides * area

print(f"{'Solution to Part 2:':<20} {price2}")

'''
print("Edges:")
for e in all_edges:
    print(e)
# Plot
plt.figure()
for e in all_edges:
    #print(e)
    plt.plot(*zip(*e), 'x-')

plt.show()
'''

'''
for k, v in make_regions(data).items():
    print(k)
    print(v)

'''
